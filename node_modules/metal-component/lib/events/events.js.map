{"version":3,"sources":["../../src/events/events.js"],"names":["addListenersFromObj","getComponentFn","component","events","eventNames","Object","keys","handles","i","length","info","extractListenerInfo_","fn","handle","selector","delegate","on","push","value","fnName","bind","console","error","constructor"],"mappings":"AAAA;;;;;QAUgBA,mB,GAAAA,mB;QAiDAC,c,GAAAA,c;;AAzDhB;;AAEA;;;;;;AAMO,SAASD,mBAAT,CAA6BE,SAA7B,EAAwCC,MAAxC,EAAgD;AACtD,KAAMC,aAAaC,OAAOC,IAAP,CAAYH,UAAU,EAAtB,CAAnB;AACA,KAAMI,UAAU,EAAhB;AACA,MAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,WAAWK,MAA/B,EAAuCD,GAAvC,EAA4C;AAC3C,MAAME,OAAOC,qBAAqBT,SAArB,EAAgCC,OAAOC,WAAWI,CAAX,CAAP,CAAhC,CAAb;AACA,MAAIE,KAAKE,EAAT,EAAa;AACZ,OAAIC,eAAJ;AACA,OAAIH,KAAKI,QAAT,EAAmB;AAClBD,aAASX,UAAUa,QAAV,CACRX,WAAWI,CAAX,CADQ,EAERE,KAAKI,QAFG,EAGRJ,KAAKE,EAHG,CAAT,CADkB,CAKf;AACH,IAND,MAMO;AACNC,aAASX,UAAUc,EAAV,CAAaZ,WAAWI,CAAX,CAAb,EAA4BE,KAAKE,EAAjC,CAAT;AACA;AACDL,WAAQU,IAAR,CAAaJ,MAAb;AACA;AACD;AACD,QAAON,OAAP;AACA;;AAED;;;;;;;AAOA,SAASI,oBAAT,CAA8BT,SAA9B,EAAyCgB,KAAzC,EAAgD;AAC/C,KAAMR,OAAO;AACZE,MAAIM;AADQ,EAAb;AAGA,KAAI,qBAASA,KAAT,KAAmB,CAAC,uBAAWA,KAAX,CAAxB,EAA2C;AAC1CR,OAAKI,QAAL,GAAgBI,MAAMJ,QAAtB;AACAJ,OAAKE,EAAL,GAAUM,MAAMN,EAAhB;AACA;AACD,KAAI,qBAASF,KAAKE,EAAd,CAAJ,EAAuB;AACtBF,OAAKE,EAAL,GAAUX,eAAeC,SAAf,EAA0BQ,KAAKE,EAA/B,CAAV;AACA;AACD,QAAOF,IAAP;AACA;;AAED;;;;;;AAMO,SAAST,cAAT,CAAwBC,SAAxB,EAAmCiB,MAAnC,EAA2C;AACjD,KAAI,uBAAWjB,UAAUiB,MAAV,CAAX,CAAJ,EAAmC;AAClC,SAAOjB,UAAUiB,MAAV,EAAkBC,IAAlB,CAAuBlB,SAAvB,CAAP;AACA,EAFD,MAEO;AACNmB,UAAQC,KAAR,wBAAmCH,MAAnC,4CACI,4BAAgBjB,UAAUqB,WAA1B,CADJ;AAGA;AACD","file":"events.js","sourcesContent":["'use strict';\n\nimport {getFunctionName, isFunction, isObject, isString} from 'metal';\n\n/**\n * Adds the listeners specified in the given object.\n * @param {!Component} component\n * @param {Object} events\n * @return {!Array<!EventHandle>} Handles from all subscribed events.\n */\nexport function addListenersFromObj(component, events) {\n\tconst eventNames = Object.keys(events || {});\n\tconst handles = [];\n\tfor (let i = 0; i < eventNames.length; i++) {\n\t\tconst info = extractListenerInfo_(component, events[eventNames[i]]);\n\t\tif (info.fn) {\n\t\t\tlet handle;\n\t\t\tif (info.selector) {\n\t\t\t\thandle = component.delegate(\n\t\t\t\t\teventNames[i],\n\t\t\t\t\tinfo.selector,\n\t\t\t\t\tinfo.fn\n\t\t\t\t); // eslint-disable-line\n\t\t\t} else {\n\t\t\t\thandle = component.on(eventNames[i], info.fn);\n\t\t\t}\n\t\t\thandles.push(handle);\n\t\t}\n\t}\n\treturn handles;\n}\n\n/**\n * Extracts listener info from the given value.\n * @param {!Component} component\n * @param {function()|string|{selector:string,fn:function()}|string} value\n * @return {!{selector:string,fn:function()}}\n * @protected\n */\nfunction extractListenerInfo_(component, value) {\n\tconst info = {\n\t\tfn: value,\n\t};\n\tif (isObject(value) && !isFunction(value)) {\n\t\tinfo.selector = value.selector;\n\t\tinfo.fn = value.fn;\n\t}\n\tif (isString(info.fn)) {\n\t\tinfo.fn = getComponentFn(component, info.fn);\n\t}\n\treturn info;\n}\n\n/**\n * Gets the listener function from its name. Throws an error if none exist.\n * @param {!Component} component\n * @param {string} fnName\n * @return {function()}\n */\nexport function getComponentFn(component, fnName) {\n\tif (isFunction(component[fnName])) {\n\t\treturn component[fnName].bind(component);\n\t} else {\n\t\tconsole.error(`No function named ${fnName} was found in the component\n\t\t\t\"${getFunctionName(component.constructor)}\". Make sure that you specify\n\t\t\tvalid function names when adding inline listeners`);\n\t}\n}\n"]}