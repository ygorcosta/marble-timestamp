{"version":3,"sources":["../src/Config.js"],"names":["Config","any","setPrimitiveValidators","array","arrayOf","setNestedValidators","bool","func","inRange","min","max","validator","instanceOf","setExplicitValueValidators","number","object","objectOf","oneOf","oneOfType","validatorArray","map","configObj","config","shapeOf","shapeObj","destructShapeOfConfigs","string","internal","mergeConfig","required","setter","value","valueFn","writeOnce","shape","keys","Object","retShape","forEach","key","context","obj","objConfig","create","assign","name","arg"],"mappings":"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","file":"Config.js","sourcesContent":["'use strict';\n\nimport validators from './validators';\n\n/**\n * Sugar api that can be used as an alternative for manually building `State`\n * configuration in the expected format. For example, instead of having\n * something like this:\n *\n * ```js\n * MyClass.STATE = {\n *   foo: {\n *     required: true,\n *     validator: validators.number,\n *     value: 13\n *   }\n * };\n * ```\n *\n * You could instead do:\n *\n * ```js\n * MyClass.STATE = {\n *   foo: Config.required().number().value(13)\n * };\n * ```\n */\nconst Config = {\n\t/**\n\t * An object that contains a validator function.\n\t * @typedef {!Object} ConfigWithValidator\n\t */\n\n\t/**\n\t * Function that creates `State` object with an `any` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tany: setPrimitiveValidators('any'),\n\n\t/**\n\t * Function that creates `State` object with an `array` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tarray: setPrimitiveValidators('array'),\n\n\t/**\n\t * Function that creates `State` object with an `arrayOf` validator.\n\t * @param {ConfigWithValidator} stateConfig `State` configuration object\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tarrayOf: setNestedValidators('arrayOf'),\n\n\t/**\n\t * Function that creates `State` object with a `bool` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tbool: setPrimitiveValidators('bool'),\n\n\t/**\n\t * Function that creates `State` object with a `func` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tfunc: setPrimitiveValidators('func'),\n\n\t/**\n\t * Creates `State` configuration object with a `rangeOf` validator.\n\t * @param {!Number} min The minimum value allowed.\n\t * @param {!Number} max The maximum value allowed.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tinRange(min, max) {\n\t\treturn this.validator(validators.inRange(min, max));\n\t},\n\n\t/**\n\t * Function that creates `State` object with an `instanceOf` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tinstanceOf: setExplicitValueValidators('instanceOf'),\n\n\t/**\n\t * Function that creates `State` object with a `number` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tnumber: setPrimitiveValidators('number'),\n\n\t/**\n\t * Function that creates `State` object with an `object` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tobject: setPrimitiveValidators('object'),\n\n\t/**\n\t * Function that creates `State` object with an `objectOf` validator.\n\t * @param {ConfigWithValidator} stateConfig `State` configuration object\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tobjectOf: setNestedValidators('objectOf'),\n\n\t/**\n\t * Function that creates `State` object with an `oneOf` validator.\n\t * @param {!Array} values `State` configuration object\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\toneOf: setExplicitValueValidators('oneOf'),\n\n\t/**\n\t * Creates `State` configuration object with an `oneOfType` validator.\n\t * @param {ConfigWithValidator[]} validatorArray Array of `State` configuration objects.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\toneOfType(validatorArray) {\n\t\tvalidatorArray = validatorArray.map(\n\t\t\tconfigObj => configObj.config.validator\n\t\t);\n\n\t\treturn this.validator(validators.oneOfType(validatorArray));\n\t},\n\n\t/**\n\t * Creates `State` configuration object with a `shapeOf` validator.\n\t * @param {!Object.<string, ConfigWithValidator>} shapeObj Values being `State` configuration objects.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tshapeOf(shapeObj) {\n\t\tshapeObj = destructShapeOfConfigs(shapeObj);\n\n\t\treturn this.validator(validators.shapeOf(shapeObj));\n\t},\n\n\t/**\n\t * Function that creates `State` object with an `string` validator.\n\t * @return {ConfigWithValidator} `State` configuration object.\n\t */\n\tstring: setPrimitiveValidators('string'),\n\n\t/**\n\t * Adds the `internal` flag to the `State` configuration.\n\t * @param {boolean} internal Flag to set \"internal\" to. True by default.\n\t * @return {!Object} `State` configuration object.\n\t */\n\tinternal(internal = true) {\n\t\treturn mergeConfig(this, {\n\t\t\tinternal,\n\t\t});\n\t},\n\n\t/**\n\t * Adds the `required` flag to the `State` configuration.\n\t * @param {boolean} required Flag to set \"required\" to. True by default.\n\t * @return {!Object} `State` configuration object.\n\t */\n\trequired(required = true) {\n\t\treturn mergeConfig(this, {\n\t\t\trequired,\n\t\t});\n\t},\n\n\t/**\n\t * Adds a setter to the `State` configuration.\n\t * @param {!function()} setter\n\t * @return {!Object} `State` configuration object.\n\t */\n\tsetter(setter) {\n\t\treturn mergeConfig(this, {\n\t\t\tsetter,\n\t\t});\n\t},\n\n\t/**\n\t * Adds a validator to the `State` configuration.\n\t * @param {!function()} validator\n\t * @return {!Object} `State` configuration object.\n\t */\n\tvalidator(validator) {\n\t\treturn mergeConfig(this, {\n\t\t\tvalidator,\n\t\t});\n\t},\n\n\t/**\n\t * Adds a default value to the `State` configuration.\n\t * @param {*} value\n\t * @return {!Object} `State` configuration object.\n\t */\n\tvalue(value) {\n\t\treturn mergeConfig(this, {\n\t\t\tvalue,\n\t\t});\n\t},\n\n\t/**\n\t * Adds a valueFn that will return a default value for the `State` configuration.\n\t * @param {!function()} valueFn\n\t * @return {!Object} `State` configuration object.\n\t */\n\tvalueFn(valueFn) {\n\t\treturn mergeConfig(this, {\n\t\t\tvalueFn,\n\t\t});\n\t},\n\n\t/**\n\t * Adds the `writeOnce` flag to the `State` configuration.\n\t * @param {boolean} writeOnce Flag to set \"writeOnce\" to. False by default.\n\t * @return {!Object} `State` configuration object.\n\t */\n\twriteOnce(writeOnce = false) {\n\t\treturn mergeConfig(this, {\n\t\t\twriteOnce,\n\t\t});\n\t},\n};\n\n/**\n * Recursively sets validators for shapeOf.\n * @param {!Object} shape The shape of specific types.\n * @return {!Object} Shape object with validators as values.\n */\nfunction destructShapeOfConfigs(shape) {\n\tconst keys = Object.keys(shape);\n\n\tconst retShape = {};\n\n\tkeys.forEach(key => {\n\t\tconst value = shape[key];\n\n\t\tretShape[key] =\n\t\t\tvalue.config && value.config.validator\n\t\t\t\t? value.config.validator\n\t\t\t\t: destructShapeOfConfigs(value);\n\t});\n\n\treturn retShape;\n}\n\n/**\n * Merges the given config object into the one that has been built so far.\n * @param {!Object} context The object calling this function.\n * @param {!Object} config The object to merge to the built config.\n * @return {!Object} The final object containing the built config.\n */\nfunction mergeConfig(context, config) {\n\tlet obj = context;\n\tconst objConfig = obj.config || {};\n\n\tobj = Object.create(Config);\n\tobj.config = {};\n\n\tObject.assign(obj.config, objConfig, config);\n\treturn obj;\n}\n\n/**\n * Calls validators with provided argument.\n * @param {string} name The name of the validator.\n * @return {function()}\n */\nfunction setExplicitValueValidators(name) {\n\treturn function(arg) {\n\t\treturn this.validator(validators[name](arg));\n\t};\n}\n\n/**\n * Calls validators with a single nested config.\n * @param {string} name The name of the validator.\n * @return {!function()}\n */\nfunction setNestedValidators(name) {\n\treturn function(arg) {\n\t\treturn this.validator(validators[name](arg.config.validator));\n\t};\n}\n\n/**\n * Adds primitive type validators to the config object.\n * @param {string} name The name of the validator.\n * @return {!function()}\n */\nfunction setPrimitiveValidators(name) {\n\treturn function() {\n\t\treturn this.validator(validators[name]);\n\t};\n}\n\nexport default Config;\n"]}