{"version":3,"sources":["../../src/html/unescape.js"],"names":["unescape","str","seen","div","document","createElement","replace","HTML_ENTITY_PATTERN_","s","entity","value","charAt","n","Number","substr","isNaN","String","fromCharCode","innerHTML","firstChild","nodeValue","slice"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AAOA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACtB;AACA,KAAIC,OAAO,EAAC,SAAS,GAAV,EAAe,QAAQ,GAAvB,EAA4B,QAAQ,GAApC,EAAyC,UAAU,GAAnD,EAAX;AACA,KAAIC,MAAMC,SAASC,aAAT,CAAuB,KAAvB,CAAV;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAOJ,IAAIK,OAAJ,CAAYC,oBAAZ,EAAkC,UAASC,CAAT,EAAYC,MAAZ,EAAoB;AAC5D;AACA,MAAIC,QAAQR,KAAKM,CAAL,CAAZ;AACA,MAAIE,KAAJ,EAAW;AACV,UAAOA,KAAP;AACA;AACD;AACA,MAAID,OAAOE,MAAP,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC7B;AACA,OAAIC,IAAIC,OAAO,MAAMJ,OAAOK,MAAP,CAAc,CAAd,CAAb,CAAR;AACA,OAAI,CAACC,MAAMH,CAAN,CAAL,EAAe;AACdF,YAAQM,OAAOC,YAAP,CAAoBL,CAApB,CAAR;AACA;AACD;AACD;AACA,MAAI,CAACF,KAAL,EAAY;AACX;AACA;AACAP,OAAIe,SAAJ,GAAgBV,IAAI,GAApB;AACA;AACAE,WAAQP,IAAIgB,UAAJ,CAAeC,SAAf,CAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,CAAC,CAAnC,CAAR;AACA;AACD;AACAnB,OAAKM,CAAL,IAAUE,KAAV;AACA,SAAOA,KAAP;AACA,EAzBM,CAAP;AA0BA;;kBAEcV,Q;;AAEf;;;;;AAIA,IAAMO,uBAAuB,iBAA7B","file":"unescape.js","sourcesContent":["'use strict';\n\n// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} The unescaped {@code str} string.\n */\nfunction unescape(str) {\n\t/** @type {!Object<string, string>} */\n\tlet seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"'};\n\tlet div = document.createElement('div');\n\n\t// Match as many valid entity characters as possible. If the actual entity\n\t// happens to be shorter, it will still work as innerHTML will return the\n\t// trailing characters unchanged. Since the entity characters do not include\n\t// open angle bracket, there is no chance of XSS from the innerHTML use.\n\t// Since no whitespace is passed to innerHTML, whitespace is preserved.\n\treturn str.replace(HTML_ENTITY_PATTERN_, function(s, entity) {\n\t\t// Check for cached entity.\n\t\tlet value = seen[s];\n\t\tif (value) {\n\t\t\treturn value;\n\t\t}\n\t\t// Check for numeric entity.\n\t\tif (entity.charAt(0) === '#') {\n\t\t\t// Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.\n\t\t\tlet n = Number('0' + entity.substr(1));\n\t\t\tif (!isNaN(n)) {\n\t\t\t\tvalue = String.fromCharCode(n);\n\t\t\t}\n\t\t}\n\t\t// Fall back to innerHTML otherwise.\n\t\tif (!value) {\n\t\t\t// Append a non-entity character to avoid a bug in Webkit that parses\n\t\t\t// an invalid entity at the end of innerHTML text as the empty string.\n\t\t\tdiv.innerHTML = s + ' ';\n\t\t\t// Then remove the trailing character from the result.\n\t\t\tvalue = div.firstChild.nodeValue.slice(0, -1);\n\t\t}\n\t\t// Cache and return.\n\t\tseen[s] = value;\n\t\treturn value;\n\t});\n}\n\nexport default unescape;\n\n/**\n * Regular expression that matches an HTML entity.\n * @type {!RegExp}\n */\nconst HTML_ENTITY_PATTERN_ = /&([^;\\s<&]+);?/g;\n"]}