{"version":3,"sources":["../../src/html/HTMLParser.js"],"names":["startTag","endTag","attr","empty","makeMap","block","inline","closeSelf","fillAttrs","special","HTMLParser","html","handler","index","chars","match","stack","last","length","indexOf","comment","substring","replace","parseEndTag","parseStartTag","text","RegExp","all","tag","tagName","rest","unary","toLowerCase","push","start","attrs","name","value","arguments","escaped","pos","i","end","str","obj","items","split"],"mappings":";;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA,IAAIA,WAAW,gHAAf;AAAA,IACCC,SAAS,4BADV;AAAA,IAECC,OAAO,oGAFR;;AAIA;AACA,IAAIC,QAAQC,QACX,oGADW,CAAZ;;AAIA;AACA,IAAIC,QAAQD,QACX,+SADW,CAAZ;;AAIA;AACA,IAAIE,SAASF,QACZ,kMADY,CAAb;;AAIA;AACA;AACA,IAAIG,YAAYH,QAAQ,kDAAR,CAAhB;;AAEA;AACA,IAAII,YAAYJ,QACf,wGADe,CAAhB;;AAIA;AACA,IAAIK,UAAUL,QAAQ,cAAR,CAAd;;AAEA,IAAIM,aAAa,SAAbA,UAAa,CAASC,IAAT,EAAeC,OAAf,EAAwB;AACxC,KAAIC,KAAJ;AAAA,KACCC,KADD;AAAA,KAECC,KAFD;AAAA,KAGCC,QAAQ,EAHT;AAAA,KAICC,OAAON,IAJR;AAKAK,OAAMC,IAAN,GAAa,YAAW;AACvB,SAAO,KAAK,KAAKC,MAAL,GAAc,CAAnB,CAAP;AACA,EAFD;;AAIA,QAAOP,IAAP,EAAa;AACZG,UAAQ,IAAR;;AAEA;AACA,MAAI,CAACE,MAAMC,IAAN,EAAD,IAAiB,CAACR,QAAQO,MAAMC,IAAN,EAAR,CAAtB,EAA6C;AAC5C;AACA,OAAIN,KAAKQ,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC9BN,YAAQF,KAAKQ,OAAL,CAAa,KAAb,CAAR;;AAEA,QAAIN,SAAS,CAAb,EAAgB;AACf,SAAID,QAAQQ,OAAZ,EACCR,QAAQQ,OAAR,CAAgBT,KAAKU,SAAL,CAAe,CAAf,EAAkBR,KAAlB,CAAhB;AACDF,YAAOA,KAAKU,SAAL,CAAeR,QAAQ,CAAvB,CAAP;AACAC,aAAQ,KAAR;AACA;;AAED;AACA,IAXD,MAWO,IAAIH,KAAKQ,OAAL,CAAa,IAAb,KAAsB,CAA1B,EAA6B;AACnCJ,YAAQJ,KAAKI,KAAL,CAAWd,MAAX,CAAR;;AAEA,QAAIc,KAAJ,EAAW;AACVJ,YAAOA,KAAKU,SAAL,CAAeN,MAAM,CAAN,EAASG,MAAxB,CAAP;AACAH,WAAM,CAAN,EAASO,OAAT,CAAiBrB,MAAjB,EAAyBsB,WAAzB;AACAT,aAAQ,KAAR;AACA;;AAED;AACA,IAVM,MAUA,IAAIH,KAAKQ,OAAL,CAAa,GAAb,KAAqB,CAAzB,EAA4B;AAClCJ,YAAQJ,KAAKI,KAAL,CAAWf,QAAX,CAAR;;AAEA,QAAIe,KAAJ,EAAW;AACVJ,YAAOA,KAAKU,SAAL,CAAeN,MAAM,CAAN,EAASG,MAAxB,CAAP;AACAH,WAAM,CAAN,EAASO,OAAT,CAAiBtB,QAAjB,EAA2BwB,aAA3B;AACAV,aAAQ,KAAR;AACA;AACD;;AAED,OAAIA,KAAJ,EAAW;AACVD,YAAQF,KAAKQ,OAAL,CAAa,GAAb,CAAR;;AAEA,QAAIM,OAAOZ,QAAQ,CAAR,GAAYF,IAAZ,GAAmBA,KAAKU,SAAL,CAAe,CAAf,EAAkBR,KAAlB,CAA9B;AACAF,WAAOE,QAAQ,CAAR,GAAY,EAAZ,GAAiBF,KAAKU,SAAL,CAAeR,KAAf,CAAxB;;AAEA,QAAID,QAAQE,KAAZ,EAAmBF,QAAQE,KAAR,CAAcW,IAAd;AACnB;AACD,GAzCD,MAyCO;AACNd,UAAOA,KAAKW,OAAL,CACN,IAAII,MAAJ,CAAW,mBAAmBV,MAAMC,IAAN,EAAnB,GAAkC,QAA7C,CADM,EAEN,UAASU,GAAT,EAAcF,IAAd,EAAoB;AACnBA,WAAOA,KAAKH,OAAL,CACN,6CADM,EAEN,MAFM,CAAP;AAIA,QAAIV,QAAQE,KAAZ,EAAmBF,QAAQE,KAAR,CAAcW,IAAd;;AAEnB,WAAO,EAAP;AACA,IAVK,CAAP;;AAaAF,eAAY,EAAZ,EAAgBP,MAAMC,IAAN,EAAhB;AACA;;AAED,MAAIN,QAAQM,IAAZ,EAAkB,MAAM,kBAAkBN,IAAxB;AAClBM,SAAON,IAAP;AACA;;AAED;AACAY;;AAEA,UAASC,aAAT,CAAuBI,GAAvB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2CC,KAA3C,EAAkD;AACjDF,YAAUA,QAAQG,WAAR,EAAV;;AAEA,MAAI3B,MAAMwB,OAAN,CAAJ,EAAoB;AACnB;AACA;AACA;AACA;AACA,UACCb,MAAMC,IAAN,MACAX,OAAOU,MAAMC,IAAN,EAAP,CADA,IAEAD,MAAMC,IAAN,OAAiB,MAHlB,EAIE;AACDM,gBAAY,EAAZ,EAAgBP,MAAMC,IAAN,EAAhB;AACA;AACD;;AAED,MAAIV,UAAUsB,OAAV,KAAsBb,MAAMC,IAAN,MAAgBY,OAA1C,EAAmD;AAClDN,eAAY,EAAZ,EAAgBM,OAAhB;AACA;;AAEDE,UAAQ5B,MAAM0B,OAAN,KAAkB,CAAC,CAACE,KAA5B;;AAEA,MAAI,CAACA,KAAL,EAAYf,MAAMiB,IAAN,CAAWJ,OAAX;;AAEZ,MAAIjB,QAAQsB,KAAZ,EAAmB;AAClB,OAAIC,QAAQ,EAAZ;;AAEAL,QAAKR,OAAL,CAAapB,IAAb,EAAmB,UAASa,KAAT,EAAgBqB,IAAhB,EAAsB;AACxC,QAAIC,QAAQC,UAAU,CAAV,IACTA,UAAU,CAAV,CADS,GAETA,UAAU,CAAV,IACCA,UAAU,CAAV,CADD,GAECA,UAAU,CAAV,IACCA,UAAU,CAAV,CADD,GAEC9B,UAAU4B,IAAV,IAAkBA,IAAlB,GAAyB,EAN9B;;AAQAD,UAAMF,IAAN,CAAW;AACVG,WAAMA,IADI;AAEVC,YAAOA,KAFG;AAGVE,cAASF,MAAMf,OAAN,CAAc,aAAd,EAA6B,OAA7B,CAHC,CAGqC;AAHrC,KAAX;AAKA,IAdD;;AAgBA,OAAIV,QAAQsB,KAAZ,EAAmBtB,QAAQsB,KAAR,CAAcL,OAAd,EAAuBM,KAAvB,EAA8BJ,KAA9B;AACnB;AACD;;AAED,UAASR,WAAT,CAAqBK,GAArB,EAA0BC,OAA1B,EAAmC;AAClC;AACA,MAAI,CAACA,OAAL,EAAc,IAAIW,MAAM,CAAV,CAAd;AAEC;AACA,QAAK,IAAIA,MAAMxB,MAAME,MAAN,GAAe,CAA9B,EAAiCsB,OAAO,CAAxC,EAA2CA,KAA3C;AACC,QAAIxB,MAAMwB,GAAN,KAAcX,OAAlB,EAA2B;AAD5B,IAGD,IAAIW,OAAO,CAAX,EAAc;AACb;AACA,QAAK,IAAIC,IAAIzB,MAAME,MAAN,GAAe,CAA5B,EAA+BuB,KAAKD,GAApC,EAAyCC,GAAzC;AACC,QAAI7B,QAAQ8B,GAAZ,EAAiB9B,QAAQ8B,GAAR,CAAY1B,MAAMyB,CAAN,CAAZ;AADlB,IAFa,CAKb;AACAzB,SAAME,MAAN,GAAesB,GAAf;AACA;AACD;AACD,CAhJD;;AAkJA,SAASpC,OAAT,CAAiBuC,GAAjB,EAAsB;AACrB,KAAIC,MAAM,EAAV;AAAA,KACCC,QAAQF,IAAIG,KAAJ,CAAU,GAAV,CADT;AAEA,MAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAII,MAAM3B,MAA1B,EAAkCuB,GAAlC;AAAuCG,MAAIC,MAAMJ,CAAN,CAAJ,IAAgB,IAAhB;AAAvC,EACA,OAAOG,GAAP;AACA;;kBAEclC,U;;AAEf","file":"HTMLParser.js","sourcesContent":["/* eslint-disable */\n\n/*\n * HTML5 Parser By Sam Blowes\n *\n * Designed for HTML5 documents\n *\n * Original code by John Resig (ejohn.org)\n * http://ejohn.org/blog/pure-javascript-html-parser/\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n *\n * ----------------------------------------------------------------------------\n * License\n * ----------------------------------------------------------------------------\n *\n * This code is triple licensed using Apache Software License 2.0,\n * Mozilla Public License or GNU Public License\n *\n * ////////////////////////////////////////////////////////////////////////////\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License.  You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * ////////////////////////////////////////////////////////////////////////////\n *\n * The contents of this file are subject to the Mozilla Public License\n * Version 1.1 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n * http://www.mozilla.org/MPL/\n *\n * Software distributed under the License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n * License for the specific language governing rights and limitations\n * under the License.\n *\n * The Original Code is Simple HTML Parser.\n *\n * The Initial Developer of the Original Code is Erik Arvidsson.\n * Portions created by Erik Arvidssson are Copyright (C) 2004. All Rights\n * Reserved.\n *\n * ////////////////////////////////////////////////////////////////////////////\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n * @license\n */\n\n/*\n *\n * ----------------------------------------------------------------------------\n * Usage\n * ----------------------------------------------------------------------------\n *\n * // Use like so:\n * HTMLParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * // or to get an XML string:\n * HTMLtoXML(htmlString);\n *\n * // or to get an XML DOM Document\n * HTMLtoDOM(htmlString);\n *\n * // or to inject into an existing document/DOM node\n * HTMLtoDOM(htmlString, document);\n * HTMLtoDOM(htmlString, document.body);\n *\n */\n\n// Regular Expressions for parsing tags and attributes\nvar startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/,\n\tendTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/,\n\tattr = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n\n// Empty Elements - HTML 5\nvar empty = makeMap(\n\t'area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr'\n);\n\n// Block Elements - HTML 5\nvar block = makeMap(\n\t'a,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video'\n);\n\n// Inline Elements - HTML 5\nvar inline = makeMap(\n\t'abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');\n\n// Attributes that have their values filled in disabled=\"disabled\"\nvar fillAttrs = makeMap(\n\t'checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected'\n);\n\n// Special Elements (can contain anything)\nvar special = makeMap('script,style');\n\nvar HTMLParser = function(html, handler) {\n\tvar index,\n\t\tchars,\n\t\tmatch,\n\t\tstack = [],\n\t\tlast = html;\n\tstack.last = function() {\n\t\treturn this[this.length - 1];\n\t};\n\n\twhile (html) {\n\t\tchars = true;\n\n\t\t// Make sure we're not in a script or style element\n\t\tif (!stack.last() || !special[stack.last()]) {\n\t\t\t// Comment\n\t\t\tif (html.indexOf('<!--') == 0) {\n\t\t\t\tindex = html.indexOf('-->');\n\n\t\t\t\tif (index >= 0) {\n\t\t\t\t\tif (handler.comment)\n\t\t\t\t\t\thandler.comment(html.substring(4, index));\n\t\t\t\t\thtml = html.substring(index + 3);\n\t\t\t\t\tchars = false;\n\t\t\t\t}\n\n\t\t\t\t// end tag\n\t\t\t} else if (html.indexOf('</') == 0) {\n\t\t\t\tmatch = html.match(endTag);\n\n\t\t\t\tif (match) {\n\t\t\t\t\thtml = html.substring(match[0].length);\n\t\t\t\t\tmatch[0].replace(endTag, parseEndTag);\n\t\t\t\t\tchars = false;\n\t\t\t\t}\n\n\t\t\t\t// start tag\n\t\t\t} else if (html.indexOf('<') == 0) {\n\t\t\t\tmatch = html.match(startTag);\n\n\t\t\t\tif (match) {\n\t\t\t\t\thtml = html.substring(match[0].length);\n\t\t\t\t\tmatch[0].replace(startTag, parseStartTag);\n\t\t\t\t\tchars = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (chars) {\n\t\t\t\tindex = html.indexOf('<');\n\n\t\t\t\tvar text = index < 0 ? html : html.substring(0, index);\n\t\t\t\thtml = index < 0 ? '' : html.substring(index);\n\n\t\t\t\tif (handler.chars) handler.chars(text);\n\t\t\t}\n\t\t} else {\n\t\t\thtml = html.replace(\n\t\t\t\tnew RegExp('([\\\\s\\\\S]*?)</' + stack.last() + '[^>]*>'),\n\t\t\t\tfunction(all, text) {\n\t\t\t\t\ttext = text.replace(\n\t\t\t\t\t\t/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g,\n\t\t\t\t\t\t'$1$2'\n\t\t\t\t\t);\n\t\t\t\t\tif (handler.chars) handler.chars(text);\n\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tparseEndTag('', stack.last());\n\t\t}\n\n\t\tif (html == last) throw 'Parse Error: ' + html;\n\t\tlast = html;\n\t}\n\n\t// Clean up any remaining tags\n\tparseEndTag();\n\n\tfunction parseStartTag(tag, tagName, rest, unary) {\n\t\ttagName = tagName.toLowerCase();\n\n\t\tif (block[tagName]) {\n\t\t\t// Close last tag if it's inline, except if it's a \"span\" (since people\n\t\t\t// usually add anything they want to spans, and browsers allow it).\n\t\t\t// Note: this exception for \"span\" was added manually (i.e. it's not\n\t\t\t// present in the original code).\n\t\t\twhile (\n\t\t\t\tstack.last() &&\n\t\t\t\tinline[stack.last()] &&\n\t\t\t\tstack.last() !== 'span'\n\t\t\t) {\n\t\t\t\tparseEndTag('', stack.last());\n\t\t\t}\n\t\t}\n\n\t\tif (closeSelf[tagName] && stack.last() == tagName) {\n\t\t\tparseEndTag('', tagName);\n\t\t}\n\n\t\tunary = empty[tagName] || !!unary;\n\n\t\tif (!unary) stack.push(tagName);\n\n\t\tif (handler.start) {\n\t\t\tvar attrs = [];\n\n\t\t\trest.replace(attr, function(match, name) {\n\t\t\t\tvar value = arguments[2]\n\t\t\t\t\t? arguments[2]\n\t\t\t\t\t: arguments[3]\n\t\t\t\t\t\t? arguments[3]\n\t\t\t\t\t\t: arguments[4]\n\t\t\t\t\t\t\t? arguments[4]\n\t\t\t\t\t\t\t: fillAttrs[name] ? name : '';\n\n\t\t\t\tattrs.push({\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tescaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\"') //\"\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (handler.start) handler.start(tagName, attrs, unary);\n\t\t}\n\t}\n\n\tfunction parseEndTag(tag, tagName) {\n\t\t// If no tag name is provided, clean shop\n\t\tif (!tagName) var pos = 0;\n\t\telse\n\t\t\t// Find the closest opened tag of the same type\n\t\t\tfor (var pos = stack.length - 1; pos >= 0; pos--)\n\t\t\t\tif (stack[pos] == tagName) break;\n\n\t\tif (pos >= 0) {\n\t\t\t// Close all the open elements, up the stack\n\t\t\tfor (var i = stack.length - 1; i >= pos; i--)\n\t\t\t\tif (handler.end) handler.end(stack[i]);\n\n\t\t\t// Remove the open elements from the stack\n\t\t\tstack.length = pos;\n\t\t}\n\t}\n};\n\nfunction makeMap(str) {\n\tvar obj = {},\n\t\titems = str.split(',');\n\tfor (var i = 0; i < items.length; i++) obj[items[i]] = true;\n\treturn obj;\n}\n\nexport default HTMLParser;\n\n/* eslint-enable */\n"]}