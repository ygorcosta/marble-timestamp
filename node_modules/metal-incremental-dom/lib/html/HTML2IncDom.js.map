{"version":3,"sources":["../../src/html/HTML2IncDom.js"],"names":["parser_","HTML2IncDom","html","run","getParser","start","tag","attrs","unary","fn","IncrementalDOM","elementVoid","elementOpen","args","i","length","push","name","value","end","elementClose","chars","text","newParser"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;;;;;AAEA,IAAIA,gBAAJ;;IAEMC,W;;;;;;;;AACL;;;;;;;0BAOeC,I,EAAM;AACpB,UAAO;AAAA,WAAMD,YAAYE,GAAZ,CAAgBD,IAAhB,CAAN;AAAA,IAAP;AACA;;AAED;;;;;;;8BAImB;AAClB,UAAOF,+BAAP;AACA;;AAED;;;;;;;sBAIWE,I,EAAM;AAChBD,eAAYG,SAAZ,GAAwBF,IAAxB,EAA8B;AAC7BG,WAAO,eAASC,GAAT,EAAcC,KAAd,EAAqBC,KAArB,EAA4B;AAClC,SAAIC,KAAKD,QACNE,eAAeC,WADT,GAEND,eAAeE,WAFlB;AAGA,SAAIC,OAAO,CAACP,GAAD,EAAM,IAAN,EAAY,EAAZ,CAAX;AACA,UAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIP,MAAMQ,MAA1B,EAAkCD,GAAlC,EAAuC;AACtCD,WAAKG,IAAL,CAAUT,MAAMO,CAAN,EAASG,IAAnB,EAAyB,wBAASV,MAAMO,CAAN,EAASI,KAAlB,CAAzB;AACA;AACDT,yBAAMI,IAAN;AACA,KAV4B;;AAY7BM,SAAK,aAASb,GAAT,EAAc;AAClBI,oBAAeU,YAAf,CAA4Bd,GAA5B;AACA,KAd4B;;AAgB7Be,WAAO,eAASC,IAAT,EAAe;AACrBZ,oBAAeY,IAAf,CAAoBA,IAApB;AACA;AAlB4B,IAA9B;AAoBA;;AAED;;;;;;;;;;;;4BASiBC,S,EAAW;AAC3BvB,aAAUuB,SAAV;AACA;;;;;;kBAGatB,W","file":"HTML2IncDom.js","sourcesContent":["'use strict';\n\nimport HTMLParser from './HTMLParser';\nimport unescape from './unescape';\n\nlet parser_;\n\nclass HTML2IncDom {\n\t/**\n\t * Should convert the given html string to a function with calls to\n\t * incremental dom methods.\n\t * @param {string} html\n\t * @return {!function()} Function with incremental dom calls for building\n\t *     the given html string.\n\t */\n\tstatic buildFn(html) {\n\t\treturn () => HTML2IncDom.run(html);\n\t}\n\n\t/**\n\t * Gets the html parser being currently used.\n\t * @return {!function()}\n\t */\n\tstatic getParser() {\n\t\treturn parser_ || HTMLParser;\n\t}\n\n\t/**\n\t * Should convert the given html string to calls to incremental dom methods.\n\t * @param {string} html\n\t */\n\tstatic run(html) {\n\t\tHTML2IncDom.getParser()(html, {\n\t\t\tstart: function(tag, attrs, unary) {\n\t\t\t\tlet fn = unary\n\t\t\t\t\t? IncrementalDOM.elementVoid\n\t\t\t\t\t: IncrementalDOM.elementOpen;\n\t\t\t\tlet args = [tag, null, []];\n\t\t\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\t\t\targs.push(attrs[i].name, unescape(attrs[i].value));\n\t\t\t\t}\n\t\t\t\tfn(...args);\n\t\t\t},\n\n\t\t\tend: function(tag) {\n\t\t\t\tIncrementalDOM.elementClose(tag);\n\t\t\t},\n\n\t\t\tchars: function(text) {\n\t\t\t\tIncrementalDOM.text(text, unescape);\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * Changes the function that will be used to parse html strings. By default\n\t * this will use the `HTMLParser` function from\n\t * https://github.com/blowsie/Pure-JavaScript-HTML5-Parser. This will accept\n\t * any function that follows that same api, basically accepting the html\n\t * string and an object with `start`, `end` and `chars` functions to be called\n\t * during the parsing.\n\t * @param {!function(string, !Object)} newParser\n\t */\n\tstatic setParser(newParser) {\n\t\tparser_ = newParser;\n\t}\n}\n\nexport default HTML2IncDom;\n"]}