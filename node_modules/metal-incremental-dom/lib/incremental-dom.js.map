{"version":3,"sources":["../src/incremental-dom.js"],"names":["IncrementalDOM","IncrementalDOMString","global","scope","exports","window"],"mappings":";;AAAA;;IAAYA,c;;AACZ;;IAAYC,oB;;AACZ;;;;AAEA,IAAI,0BAAJ,EAAoB;AACnB;AACA;AACA;AACA;AACAC,QAAOF,cAAP,GAAwBC,oBAAxB;AACA,CAND,MAMO;AACN,KAAIE,QACH,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOF,MAAP,KAAkB,WAApD,GACGA,MADH,GAEGG,MAHJ;;AAKA,KAAI,CAACF,MAAMH,cAAX,EAA2B;AAC1BG,QAAMH,cAAN,GAAuBA,cAAvB;AACA;AACD","file":"incremental-dom.js","sourcesContent":["import * as IncrementalDOM from 'incremental-dom';\nimport * as IncrementalDOMString from 'incremental-dom-string';\nimport {isServerSide} from 'metal';\n\nif (isServerSide()) {\n\t// Overrides global.IncrementalDOM virtual elements with incremental dom\n\t// string implementation for server side rendering. At the moment it does not\n\t// override for Node.js tests since tests are using jsdom to simulate the\n\t// browser.\n\tglobal.IncrementalDOM = IncrementalDOMString;\n} else {\n\tlet scope =\n\t\ttypeof exports !== 'undefined' && typeof global !== 'undefined'\n\t\t\t? global\n\t\t\t: window;\n\n\tif (!scope.IncrementalDOM) {\n\t\tscope.IncrementalDOM = IncrementalDOM;\n\t}\n}\n"]}