{"version":3,"sources":["../src/incremental-dom-aop.js"],"names":["getOriginalFns","getOriginalFn","startInterception","stopInterception","originalFns","name","fns","attr","fnAttr","elementOpenEnd","fnOpenEnd","elementOpenStart","fnOpenStart","elementVoid","fnVoid","fnStack","push","pop","IncrementalDOM","attributes","symbols","default","elementClose","elementOpen","text","collectedArgs","value","tag","key","statics","apply","arguments","getStack","length","buildHandleCall","data","fn","handleCall","bind","stack"],"mappings":"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","file":"incremental-dom-aop.js","sourcesContent":["'use strict';\n\nimport './incremental-dom';\n\n/**\n * Gets the original incremental dom functions.\n * @return {!Object}\n */\nexport function getOriginalFns() {\n\treturn originalFns;\n}\n\n/**\n * Gets the original incremental dom function with the given name.\n * @param {string} name\n * @return {!Object}\n */\nexport function getOriginalFn(name) {\n\treturn originalFns[name];\n}\n\n/**\n * Starts intercepting calls to incremental dom, replacing them with the given\n * functions. Note that `elementVoid`, `elementOpenStart`, `elementOpenEnd`\n * and `attr` are the only ones that can't be intercepted, since they'll\n * automatically be converted into equivalent calls to `elementOpen` and\n * `elementClose`.\n * @param {!Object} fns Functions to be called instead of the original ones\n *     from incremental DOM. Should be given as a map from the function name\n *     to the function that should intercept it. All interceptors will receive\n *     the original function as the first argument, the actual arguments from\n *     from the original call following it.\n */\nexport function startInterception(fns) {\n\tfns.attr = fnAttr;\n\tfns.elementOpenEnd = fnOpenEnd;\n\tfns.elementOpenStart = fnOpenStart;\n\tfns.elementVoid = fnVoid;\n\tfnStack.push(fns);\n}\n\n/**\n * Restores the original `elementOpen` function from incremental dom to the\n * implementation it used before the last call to `startInterception`.\n */\nexport function stopInterception() {\n\tfnStack.pop();\n}\n\nconst originalFns = {\n\tattr: IncrementalDOM.attr,\n\tattributes: IncrementalDOM.attributes[IncrementalDOM.symbols.default],\n\telementClose: IncrementalDOM.elementClose,\n\telementOpen: IncrementalDOM.elementOpen,\n\telementOpenEnd: IncrementalDOM.elementOpenEnd,\n\telementOpenStart: IncrementalDOM.elementOpenStart,\n\telementVoid: IncrementalDOM.elementVoid,\n\ttext: IncrementalDOM.text,\n};\n\nconst fnStack = [];\n\nlet collectedArgs = [];\n\nfunction fnAttr(name, value) {\n\tcollectedArgs.push(name, value);\n}\n\nfunction fnOpenStart(tag, key, statics) {\n\tcollectedArgs = [tag, key, statics];\n}\n\nfunction fnOpenEnd() {\n\treturn IncrementalDOM.elementOpen(...collectedArgs);\n}\n\nfunction fnVoid() {\n\tIncrementalDOM.elementOpen.apply(null, arguments);\n\treturn IncrementalDOM.elementClose.apply(null, arguments);\n}\n\nfunction getStack() {\n\treturn fnStack.length > 0 ? fnStack[fnStack.length - 1] : null;\n}\n\nfunction buildHandleCall(name) {\n\tconst data = {\n\t\tname,\n\t};\n\tconst fn = handleCall.bind(data);\n\treturn fn;\n}\n\nfunction handleCall() {\n\tconst name = this.name; // eslint-disable-line\n\tconst stack = getStack();\n\tconst fn = (stack && stack[name]) || originalFns[name];\n\treturn fn(...arguments);\n}\n\nIncrementalDOM.attr = buildHandleCall('attr');\nIncrementalDOM.elementClose = buildHandleCall('elementClose');\nIncrementalDOM.elementOpen = buildHandleCall('elementOpen');\nIncrementalDOM.elementOpenEnd = buildHandleCall('elementOpenEnd');\nIncrementalDOM.elementOpenStart = buildHandleCall('elementOpenStart');\nIncrementalDOM.elementVoid = buildHandleCall('elementVoid');\nIncrementalDOM.text = buildHandleCall('text');\n\nIncrementalDOM.attributes[IncrementalDOM.symbols.default] = buildHandleCall(\n\t'attributes'\n);\n"]}