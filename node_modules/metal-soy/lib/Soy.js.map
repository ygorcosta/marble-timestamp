{"version":3,"sources":["../src/Soy.js"],"names":["ijData","Soy","component","elementTemplate","constructor","TEMPLATE","getOriginalFn","soyParamTypes_","types","keys","params","configs","i","length","data","mixin","getConfig","getStateKeys","forEach","value","key","isHtmlParam_","soyRenderer_","toIncDom","bind","prepareStateForRender","namespace","templateName","ignored","goog","loadedModules_","Error","originalFn","args","componentCtor","Object","prototype","hasOwnProperty","call","push","IncrementalDOM","elementVoid","apply","name","state","getDataManager","getStateInstance","getStateKeyConfig","isHtml","type","split","indexOf","templates","mainTemplate","RENDERER","registerForInterception","register","render","startInterception","handleInterceptedCall_","buildTemplateData_","stopInterception","changes","should","shouldUpdate","fn","props","incDomFn","element","document","createElement","patch","innerHTML","content","contentKind","buildFn","RENDERER_NAME","Config","SoyAop","validators"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AAEA;AACA,IAAIA,SAAS,EAAb;;AAEA;;;;IAGMC,G;;;;;;;;;;;;AACL;;;;;qCAKmBC,S,EAAW;AAC7B,OAAIC,kBAAkBD,UAAUE,WAAV,CAAsBC,QAA5C;AACA,OAAI,CAAC,uBAAWF,eAAX,CAAL,EAAkC;AACjC;AACA;;AAEDA,qBAAkB,iBAAOG,aAAP,CAAqBH,eAArB,CAAlB;AACA,QAAKI,cAAL,GAAsBJ,gBAAgBK,KAAhB,IAAyB,EAA/C;;AAEA,OAAMC,OAAON,gBAAgBO,MAAhB,IAA0B,EAAvC;AACA,OAAMC,UAAU,EAAhB;AACA,QAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,KAAKI,MAAzB,EAAiCD,GAAjC,EAAsC;AACrC,QAAI,CAACV,UAAUO,KAAKG,CAAL,CAAV,CAAL,EAAyB;AACxBD,aAAQF,KAAKG,CAAL,CAAR,IAAmB,EAAnB;AACA;AACD;AACD,UAAOD,OAAP;AACA;;AAED;;;;;;;;;;;;;;;qCAYmBT,S,EAAWQ,M,EAAQ;AAAA;;AACrC,OAAMI,OAAO,cAAOC,KAAP,CAAa,EAAb,EAAiB,KAAKC,SAAL,CAAed,SAAf,CAAjB,CAAb;AACAA,aAAUe,YAAV,GAAyBC,OAAzB,CAAiC,eAAO;AACvC,QAAIC,QAAQjB,UAAUkB,GAAV,CAAZ;AACA,QAAI,OAAKC,YAAL,CAAkBnB,SAAlB,EAA6BkB,GAA7B,CAAJ,EAAuC;AACtCD,aAAQG,aAAaC,QAAb,CAAsBJ,KAAtB,CAAR;AACA;AACDL,SAAKM,GAAL,IAAYD,KAAZ;AACA,IAND;;AAQA,QAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EAAwC;AACvC,QAAI,CAACE,KAAKJ,OAAOE,CAAP,CAAL,CAAD,IAAoB,uBAAWV,UAAUQ,OAAOE,CAAP,CAAV,CAAX,CAAxB,EAA0D;AACzDE,UAAKJ,OAAOE,CAAP,CAAL,IAAkBV,UAAUQ,OAAOE,CAAP,CAAV,EAAqBY,IAArB,CAA0BtB,SAA1B,CAAlB;AACA;AACD;;AAED,OAAI,uBAAWA,UAAUuB,qBAArB,CAAJ,EAAiD;AAChD,WAAOvB,UAAUuB,qBAAV,CAAgCX,IAAhC,KAAyCA,IAAhD;AACA,IAFD,MAEO;AACN,WAAOA,IAAP;AACA;AACD;;AAED;;;;;;;;;;;8BAQYY,S,EAAWC,Y,EAAc;AACpC,UAAO,UAASb,IAAT,EAAec,OAAf,EAAwB5B,MAAxB,EAAgC;AACtC,QAAI,CAAC6B,KAAKC,cAAL,CAAoBJ,SAApB,CAAL,EAAqC;AACpC,WAAM,IAAIK,KAAJ,kCAEJL,SAFI,4BAAN;AAKA;AACD,WAAOG,KAAKC,cAAL,CAAoBJ,SAApB,EAA+BC,YAA/B,EACNb,IADM,EAENc,OAFM,EAGN5B,MAHM,CAAP;AAKA,IAbD;AAcA;;AAED;;;;;;;;;;;;yCASuBgC,U,EAAuB;AAAA,OAAXlB,IAAW,uEAAJ,EAAI;;AAC7C,OAAMmB,OAAO,CAACD,WAAWE,aAAZ,EAA2B,IAA3B,EAAiC,EAAjC,CAAb;AACA,QAAK,IAAId,GAAT,IAAgBN,IAAhB,EAAsB;AACrB,QAAIqB,OAAOC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCxB,IAArC,EAA2CM,GAA3C,CAAJ,EAAqD;AACpDa,UAAKM,IAAL,CAAUnB,GAAV,EAAeN,KAAKM,GAAL,CAAf;AACA;AACD;AACDoB,kBAAeC,WAAf,CAA2BC,KAA3B,CAAiC,IAAjC,EAAuCT,IAAvC;AACA;;AAED;;;;;;;;;;+BAOa/B,S,EAAWyC,I,EAAM;AAC7B,OAAMC,QAAQ1C,UAAU2C,cAAV,GAA2BC,gBAA3B,CAA4C5C,SAA5C,CAAd;AACA,OAAI0C,MAAMG,iBAAN,CAAwBJ,IAAxB,EAA8BK,MAAlC,EAA0C;AACzC,WAAO,IAAP;AACA;;AAED,OAAM7C,kBAAkB,iBAAOG,aAAP,CACvBJ,UAAUE,WAAV,CAAsBC,QADC,CAAxB;AAGA,OAAM4C,OAAO,CAAC9C,gBAAgBK,KAAhB,IAAyB,EAA1B,EAA8BmC,IAA9B,KAAuC,EAApD;AACA,UAAOM,KAAKC,KAAL,CAAW,GAAX,EAAgBC,OAAhB,CAAwB,MAAxB,MAAoC,CAAC,CAA5C;AACA;;AAED;;;;;;;;;;;;2BASSjB,a,EAAekB,S,EAAoC;AAAA,OAAzBC,YAAyB,uEAAV,QAAU;;AAC3DnB,iBAAcoB,QAAd,GAAyBhC,YAAzB;AACAY,iBAAc7B,QAAd,GAAyB,iBAAOC,aAAP,CAAqB8C,UAAUC,YAAV,CAArB,CAAzB;AACAnB,iBAAc7B,QAAd,CAAuB6B,aAAvB,GAAuCA,aAAvC;AACA,oBAAOqB,uBAAP,CAA+BH,SAA/B,EAA0CC,YAA1C;AACA,qCAAkBG,QAAlB,CAA2BtB,aAA3B;AACA;;AAED;;;;;;;;;;+BAOahC,S,EAAW;AACvB,OAAIC,kBAAkBD,UAAUE,WAAV,CAAsBC,QAA5C;AACA,OAAI,uBAAWF,eAAX,KAA+B,CAACD,UAAUuD,MAA9C,EAAsD;AACrDtD,sBAAkB,iBAAOG,aAAP,CAAqBH,eAArB,CAAlB;AACA,qBAAOuD,iBAAP,CAAyB,KAAKC,sBAA9B;AACA,QAAM7C,OAAO,KAAK8C,kBAAL,CACZ1D,SADY,EAEZC,gBAAgBO,MAAhB,IAA0B,EAFd,CAAb;AAIAP,oBAAgBW,IAAhB,EAAsB,IAAtB,EAA4Bd,MAA5B;AACA,qBAAO6D,gBAAP;AACA,IATD,MASO;AACN,2GAAmB3D,SAAnB;AACA;AACD;;AAED;;;;;;;kCAIgBY,I,EAAM;AACrBd,YAASc,QAAQ,EAAjB;AACA;;AAED;;;;;;;;;;+BAOaZ,S,EAAW4D,O,EAAS;AAChC,OAAMC,gHAA4B7D,SAA5B,EAAuC4D,OAAvC,CAAN;AACA,OAAI,CAACC,MAAD,IAAW7D,UAAU8D,YAAzB,EAAuC;AACtC,WAAOD,MAAP;AACA;;AAED,OAAME,KAAK/D,UAAUE,WAAV,CAAsBC,QAAjC;AACA,OAAMK,SAASuD,KAAK,iBAAO3D,aAAP,CAAqB2D,EAArB,EAAyBvD,MAA9B,GAAuC,EAAtD;AACA,QAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EAAwC;AACvC,QAAIkD,QAAQI,KAAR,CAAcxD,OAAOE,CAAP,CAAd,CAAJ,EAA8B;AAC7B,YAAO,IAAP;AACA;AACD;AACD,UAAO,KAAP;AACA;;AAED;;;;;;;;+BAKauD,Q,EAAU;AACtB,OAAMC,UAAUC,SAASC,aAAT,CAAuB,KAAvB,CAAhB;AACA9B,kBAAe+B,KAAf,CAAqBH,OAArB,EAA8BD,QAA9B;AACA,UAAOC,QAAQI,SAAf;AACA;;AAED;;;;;;;;2BAKSrD,K,EAAO;AACf,OACC,qBAASA,KAAT,KACA,qBAASA,MAAMsD,OAAf,CADA,IAEAtD,MAAMuD,WAAN,KAAsB,MAHvB,EAIE;AACDvD,YAAQA,MAAMsD,OAAd;AACA;AACD,OAAI,qBAAStD,KAAT,CAAJ,EAAqB;AACpBA,YAAQ,iCAAYwD,OAAZ,CAAoBxD,KAApB,CAAR;AACA;AACD,UAAOA,KAAP;AACA;;;;EA/NgB,8BAAuBf,W;;AAkOzC,IAAMkB,eAAe,IAAIrB,GAAJ,EAArB;AACAqB,aAAasD,aAAb,GAA6B,KAA7B;;kBAEetD,Y;QACPuD,M;QAAwB5E,G,GAAhBqB,Y;QAAqBwD,M;QAAQC,U","file":"Soy.js","sourcesContent":["'use strict';\n\nimport 'metal-soy-bundle';\nimport {ComponentRegistry} from 'metal-component';\nimport {isFunction, isObject, isString, object} from 'metal';\nimport {validators, Config} from 'metal-state';\nimport IncrementalDomRenderer, {HTML2IncDom} from 'metal-incremental-dom';\nimport SoyAop from './SoyAop';\n\n// The injected data that will be passed to soy templates.\nlet ijData = {};\n\n/**\n * Soy Renderer\n */\nclass Soy extends IncrementalDomRenderer.constructor {\n\t/**\n\t * Adds the template params to the component's state, if they don't exist yet.\n\t * @param {!Component} component\n\t * @return {Object}\n\t */\n\tgetExtraDataConfig(component) {\n\t\tlet elementTemplate = component.constructor.TEMPLATE;\n\t\tif (!isFunction(elementTemplate)) {\n\t\t\treturn;\n\t\t}\n\n\t\telementTemplate = SoyAop.getOriginalFn(elementTemplate);\n\t\tthis.soyParamTypes_ = elementTemplate.types || {};\n\n\t\tconst keys = elementTemplate.params || [];\n\t\tconst configs = {};\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tif (!component[keys[i]]) {\n\t\t\t\tconfigs[keys[i]] = {};\n\t\t\t}\n\t\t}\n\t\treturn configs;\n\t}\n\n\t/**\n\t * Copies the component's state to an object so it can be passed as it's\n\t * template call's data. The copying needs to be done because, if the component\n\t * itself is passed directly, some problems occur when soy tries to merge it\n\t * with other data, due to property getters and setters. This is safer.\n\t * Also calls the component's \"prepareStateForRender\" to let it change the\n\t * data passed to the template.\n\t * @param {!Component} component\n\t * @param {!Array<string>} params The params used by this template.\n\t * @return {!Object}\n\t * @protected\n\t */\n\tbuildTemplateData_(component, params) {\n\t\tconst data = object.mixin({}, this.getConfig(component));\n\t\tcomponent.getStateKeys().forEach(key => {\n\t\t\tlet value = component[key];\n\t\t\tif (this.isHtmlParam_(component, key)) {\n\t\t\t\tvalue = soyRenderer_.toIncDom(value);\n\t\t\t}\n\t\t\tdata[key] = value;\n\t\t});\n\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (!data[params[i]] && isFunction(component[params[i]])) {\n\t\t\t\tdata[params[i]] = component[params[i]].bind(component);\n\t\t\t}\n\t\t}\n\n\t\tif (isFunction(component.prepareStateForRender)) {\n\t\t\treturn component.prepareStateForRender(data) || data;\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the requested template function. This function will be wrapped in\n\t * another though, just to defer the requirement of the template's module\n\t * being ready until the function is actually called.\n\t * @param {string} namespace The soy template's namespace.\n\t * @param {string} templateName The name of the template function.\n\t * @return {!function()}\n\t */\n\tgetTemplate(namespace, templateName) {\n\t\treturn function(data, ignored, ijData) {\n\t\t\tif (!goog.loadedModules_[namespace]) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`No template with namespace \"${\n\t\t\t\t\t\tnamespace\n\t\t\t\t\t}\" has been loaded yet.`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn goog.loadedModules_[namespace][templateName](\n\t\t\t\tdata,\n\t\t\t\tignored,\n\t\t\t\tijData\n\t\t\t);\n\t\t};\n\t}\n\n\t/**\n\t * Handles an intercepted soy template call. If the call is for a component's\n\t * main template, then it will be replaced with a call that incremental dom\n\t * can use for both handling an instance of that component and rendering it.\n\t * @param {!function()} originalFn The original template function that was\n\t *     intercepted.\n\t * @param {Object} data The data the template was called with.\n\t * @protected\n\t */\n\thandleInterceptedCall_(originalFn, data = {}) {\n\t\tconst args = [originalFn.componentCtor, null, []];\n\t\tfor (let key in data) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(data, key)) {\n\t\t\t\targs.push(key, data[key]);\n\t\t\t}\n\t\t}\n\t\tIncrementalDOM.elementVoid.apply(null, args);\n\t}\n\n\t/**\n\t * Checks if the given param type is html.\n\t * @param {!Component} component\n\t * @param {string} name\n\t * @protected\n\t * @return {boolean}\n\t */\n\tisHtmlParam_(component, name) {\n\t\tconst state = component.getDataManager().getStateInstance(component);\n\t\tif (state.getStateKeyConfig(name).isHtml) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst elementTemplate = SoyAop.getOriginalFn(\n\t\t\tcomponent.constructor.TEMPLATE\n\t\t);\n\t\tconst type = (elementTemplate.types || {})[name] || '';\n\t\treturn type.split('|').indexOf('html') !== -1;\n\t}\n\n\t/**\n\t * Registers the given templates to be used by `Soy` for the specified\n\t * component constructor.\n\t * @param {!Function} componentCtor The constructor of the component that\n\t *     should use the given templates.\n\t * @param {!Object} templates Object containing soy template functions.\n\t * @param {string=} mainTemplate The name of the main template that should be\n\t *     used to render the component. Defaults to \"render\".\n\t */\n\tregister(componentCtor, templates, mainTemplate = 'render') {\n\t\tcomponentCtor.RENDERER = soyRenderer_;\n\t\tcomponentCtor.TEMPLATE = SoyAop.getOriginalFn(templates[mainTemplate]);\n\t\tcomponentCtor.TEMPLATE.componentCtor = componentCtor;\n\t\tSoyAop.registerForInterception(templates, mainTemplate);\n\t\tComponentRegistry.register(componentCtor);\n\t}\n\n\t/**\n\t * Overrides the default method from `IncrementalDomRenderer` so the component's\n\t * soy template can be used for rendering.\n\t * @param {!Component} component\n\t * @param {!Object} data Data passed to the component when rendering it.\n\t * @override\n\t */\n\trenderIncDom(component) {\n\t\tlet elementTemplate = component.constructor.TEMPLATE;\n\t\tif (isFunction(elementTemplate) && !component.render) {\n\t\t\telementTemplate = SoyAop.getOriginalFn(elementTemplate);\n\t\t\tSoyAop.startInterception(this.handleInterceptedCall_);\n\t\t\tconst data = this.buildTemplateData_(\n\t\t\t\tcomponent,\n\t\t\t\telementTemplate.params || []\n\t\t\t);\n\t\t\telementTemplate(data, null, ijData);\n\t\t\tSoyAop.stopInterception();\n\t\t} else {\n\t\t\tsuper.renderIncDom(component);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the injected data object that should be passed to templates.\n\t * @param {Object} data\n\t */\n\tsetInjectedData(data) {\n\t\tijData = data || {};\n\t}\n\n\t/**\n\t * Overrides the original `IncrementalDomRenderer` method so that only\n\t * state keys used by the main template can cause updates.\n\t * @param {!Component} component\n\t * @param {Object} changes\n\t * @return {boolean}\n\t */\n\tshouldUpdate(component, changes) {\n\t\tconst should = super.shouldUpdate(component, changes);\n\t\tif (!should || component.shouldUpdate) {\n\t\t\treturn should;\n\t\t}\n\n\t\tconst fn = component.constructor.TEMPLATE;\n\t\tconst params = fn ? SoyAop.getOriginalFn(fn).params : [];\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (changes.props[params[i]]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Converts the given incremental dom function into an html string.\n\t * @param {!function()} incDomFn\n\t * @return {string}\n\t */\n\ttoHtmlString(incDomFn) {\n\t\tconst element = document.createElement('div');\n\t\tIncrementalDOM.patch(element, incDomFn);\n\t\treturn element.innerHTML;\n\t}\n\n\t/**\n\t * Converts the given html string into an incremental dom function.\n\t * @param {string|{contentKind: string, content: string}} value\n\t * @return {!function()}\n\t */\n\ttoIncDom(value) {\n\t\tif (\n\t\t\tisObject(value) &&\n\t\t\tisString(value.content) &&\n\t\t\tvalue.contentKind === 'HTML'\n\t\t) {\n\t\t\tvalue = value.content;\n\t\t}\n\t\tif (isString(value)) {\n\t\t\tvalue = HTML2IncDom.buildFn(value);\n\t\t}\n\t\treturn value;\n\t}\n}\n\nconst soyRenderer_ = new Soy();\nsoyRenderer_.RENDERER_NAME = 'soy';\n\nexport default soyRenderer_;\nexport {Config, soyRenderer_ as Soy, SoyAop, validators};\n"]}